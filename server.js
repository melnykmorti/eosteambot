import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import TelegramBot from "node-telegram-bot-api";
import connectDatabase from "./config.js/mongoDb.js";
import { Api, JsonRpc } from "eosjs";
import { JsSignatureProvider } from "eosjs/dist/eosjs-jssig.js"; // development only
import { TextDecoder, TextEncoder } from "util";
import fetch from "node-fetch";
import asyncHandler from "express-async-handler";
import { log } from "console";

import User from "./models/userModel.js";
import Account from "./models/accountModel.js";
import ImportData from "./dataImport.js";
import { blockTimestampToDate } from "eosjs/dist/eosjs-serialize.js";

dotenv.config();
connectDatabase();
const privateKeys = [""];

const bot = new TelegramBot(process.env.TG_BOT_TOKEN, { polling: true });

//const signatureProvider = new JsSignatureProvider(privateKeys);
const rpc = new JsonRpc("https://eos.greymass.com", { fetch }); //required to read blockchain state
//const api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() }); //required to submit transactions

///// times , interval etc.
const second = 1000;
const minute = second * 60;

//////////////////

const app = express();
app.use(express.json());
app.use(cors());

app.use("/import", ImportData);

// bot.onText(
//     /\/start/,
//     asyncHandler(async (msg) => {
//         const chatId = msg.chat.id;
//         const userId = msg.from.id;
//         const { first_name, username } = msg.from;

//         console.log("/start");
//         if (chatId == process.env.CHAT_ID) return;
//         const userProfile = await User.findOne({ userId });

//         if (userProfile && userProfile.status == "accepted") {
//             bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!");
//         } else if (userProfile && userProfile.status == "pending") {
//         } else if (!userProfile) {
//             const createProfile = await User.create({
//                 first_name,
//                 username,
//                 userId,
//             });

//             bot.sendMessage(chatId, createProfile.entryAnswers[0].text);
//         }

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
//         //     if (chatId == process.env.chatId || chatId == process.env.channelId) return;
//         //     const existingProfile = await UserProfile.findOne({ userId });
//         //     console.log("existingProfile:", existingProfile);
//         //     if (existingProfile) {
//         //         // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å", "–û –Ω–∞—Å"

//         //         bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", {
//         //             reply_markup: {
//         //                 keyboard: [["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è –û –Ω–∞—Å"]],
//         //                 resize_keyboard: true,
//         //             },
//         //         });
//         //     } else {
//         //         // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É
//         //         if (isOwner(userId)) {
//         //             const userProfile = new UserProfile({
//         //                 userId: userId,
//         //                 referralCode: generateUniqueReferralCode(12), // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è
//         //                 profitsCount: 0,
//         //                 totalProfitAmount: 0,
//         //                 workerUserName: userUsername,
//         //             });
//         //             userProfile.save();
//         //         } else {
//         //             bot.sendMessage(
//         //                 chatId,
//         //                 "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?</b>",
//         //                 {
//         //                     parse_mode: "HTML",
//         //                     reply_markup: {
//         //                         remove_keyboard: true,
//         //                     },
//         //                 }
//         //             );
//         //             await UserState.updateOne(
//         //                 { userId },
//         //                 { state: "applying" },
//         //                 { upsert: true }
//         //             );
//         //         }

//         //         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//         //     }
//     })
// );

// bot.on(
//     "message",
//     asyncHandler(async (msg) => {
//         try {
//             const chatId = msg.chat.id;
//             const userId = msg.from.id;
//             const msgText = msg.text;
//             if (chatId == process.env.CHAT_ID) return;

//             const userProfile = await User.findOne({ userId });
//             //    console.log(userProfile);
//             if (userProfile && userProfile.status == "accepted") {
//             } else if (userProfile && userProfile.status == "pending") {
//                 console.log(msgText);
//                 const deepAnswers = JSON.parse(
//                     JSON.stringify(userProfile.entryAnswers)
//                 );
//                 const isNotAllAnswered = deepAnswers.find(
//                     (item) => !item.isAnswered
//                 );
//                 if (isNotAllAnswered) {
//                     deepAnswers.find((item) => !item.isAnswered).answer =
//                         msgText;
//                     deepAnswers.find(
//                         (item) => !item.isAnswered
//                     ).isAnswered = true;

//                     userProfile.entryAnswers = deepAnswers;

//                     const nextQuestion = userProfile.entryAnswers.find(
//                         (item) => !item.isAnswered
//                     );
//                     if (nextQuestion) {
//                         await userProfile.save();
//                         bot.sendMessage(chatId, nextQuestion.text);
//                     } else {
//                         bot.sendMessage(
//                             chatId,
//                             "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ñ–¥–∏!"
//                         );
//                     }
//                 } else {
//                     bot.sendMessage(chatId, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ñ–¥–∏!");
//                 }
//             }
//         } catch (error) {
//             console.log(error);
//         }
//     })
// );

const ownerChatId = [6260662696];

function isOwner(userId) {
    return ownerChatId.includes(userId);
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userUsername = msg.from.username;
    console.log("/start");
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    if(chatId==process.env.chatId||chatId==process.env.channelId)return;
    const existingProfile = await UserProfile.findOne({ userId });
    console.log("existingProfile:", existingProfile);
    if (existingProfile) {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å", "–û –Ω–∞—Å"

        bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", {
            reply_markup: {
                keyboard: [["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è –û –Ω–∞—Å"]],
                resize_keyboard: true,
            },
        });
    } else {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É
        if (isOwner(userId)) {
            const userProfile = new UserProfile({
                userId: userId,
                referralCode: generateUniqueReferralCode(12), // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è
                profitsCount: 0,
                totalProfitAmount: 0,
                workerUserName: userUsername,
            });
            userProfile.save();
        } else {
            bot.sendMessage(
                chatId,
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?</b>",
                {
                    parse_mode: "HTML",
                    reply_markup: {
                        remove_keyboard: true,
                    },
                }
            );
            await UserState.updateOne(
                { userId },
                { state: "applying" },
                { upsert: true }
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    }
   
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userUsername = msg.from.username;
    // –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if(chatId==process.env.chatId||chatId==process.env.channelId)return;
    const profile = await UserProfile.findOne({ userId });

    if (profile) {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        const { profits, referralCode } = profile;
        const date = profile.createdAt;
        let currentDate = Date.parse(new Date());
        let days = (currentDate - Date.parse(date)) / 86400000; //86400000 - ms –≤ –¥–Ω–µ
        console.log(Math.round(days));
        if (isOwner(userId)) {
            bot.sendMessage(
                chatId,
                `‚úåüèª–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! - @${userUsername} —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Phantom Team.\n\n` +
                    `üë§ –ù–∏–∫–Ω–µ–π–º: ${profile.showProfile ? "üü¢" : "üî¥"}\n` +
                    `üßä–í–∞—à –∫–æ—à–µ–ª–µ–∫: ${
                        profile.wallet.address.length > 12 ? "üü¢" : "üî¥"
                    }\n` +
                    `üí≥–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç:  <b>${profile.workerPercent}%</b>\n\n` +
                    `<b>‚òÅÔ∏è –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode} (–í—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ)</b>\n` +
                    `<b>üë®‚Äçüíª–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: ffff.com</b>`,
                {
                    parse_mode: "HTML",
                    disable_web_page_preview: true,
                    reply_markup: {
                        resize_keyboard: true,
                        inline_keyboard: [
                            [
                                {
                                    text: "üßä–ú–æ–π –∫–æ—à–µ–ª–µ–∫",
                                    callback_data: JSON.stringify({
                                        action: "wallets",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                    callback_data: JSON.stringify({
                                        action: "stats",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                    callback_data: JSON.stringify({
                                        action: "settings",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üñ•Ô∏èWork",
                                    callback_data: JSON.stringify({
                                        action: "work_info",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üñ•Ô∏è–í—ã–ø–ª–∞—Ç–∏—Ç—å",
                                    callback_data: JSON.stringify({
                                        action: "payoff",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üñ•Ô∏è–ó–∞—è–≤–∫–∏",
                                    callback_data: JSON.stringify({
                                        action: "applications",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –†–û–ó–´–ì–†–´–®–ê",
                                    callback_data: JSON.stringify({
                                        action: "sendup_change",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞",
                                    callback_data: JSON.stringify({
                                        action: "workerpercent_change",
                                    }),
                                },
                            ],
                        ],
                    },
                }
            );
        } else {
            bot.sendMessage(
                chatId,
                `‚úåüèª–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! - @${userUsername} —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Phantom Team.\n\n` +
                    `üë§ –ù–∏–∫–Ω–µ–π–º: ${profile.showProfile ? "üü¢" : "üî¥"}\n` +
                    `üßä–í–∞—à –∫–æ—à–µ–ª–µ–∫: ${
                        profile.wallet.address.length > 12 ? "üü¢" : "üî¥"
                    }\n` +
                    `üí≥–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç:  <b>${profile.workerPercent}%</b>\n\n` +
                    `<b>‚òÅÔ∏è –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode} (–í—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ)</b>\n` +
                    `<b>üë®‚Äçüíª–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: fff?rid=${referralCode}</b>`,
                {
                    parse_mode: "HTML",
                    disable_web_page_preview: true,
                    reply_markup: {
                        resize_keyboard: true,
                        inline_keyboard: [
                            [
                                {
                                    text: "üßä–ú–æ–π –∫–æ—à–µ–ª–µ–∫",
                                    callback_data: JSON.stringify({
                                        action: "wallets",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                    callback_data: JSON.stringify({
                                        action: "stats",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                    callback_data: JSON.stringify({
                                        action: "settings",
                                    }),
                                },
                            ],
                            [
                                {
                                    text: "üñ•Ô∏èWork",
                                    callback_data: JSON.stringify({
                                        action: "work_info",
                                    }),
                                },
                            ],
                        ],
                    },
                }
            );
        }
    } else {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
        bot.sendMessage(
            chatId,
            "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. "
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
bot.onText(/üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/, async (msg) => {
    const chatId = msg.chat.id;
    if(chatId==process.env.chatId||chatId==process.env.channelId)return;
    const profits = await Profit.find({ isPaid: true });
    const initialValue = 0;
    const sumProfits = profits.reduce(
        (accumulator, currentValue) => accumulator + currentValue.amountUsd,
        initialValue
    );
    bot.sendMessage(
        chatId,
        "üôä –ß–∞—Ç: https://t.me/+loV\n" +
            "üìö –ú–∞–Ω—É–∞–ª: https://teletype.in\n" +
            "‚ÑπÔ∏è–ò–Ω—Ñ–æ: https://t.me/+oJ \n\n" +
            "üë§–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @ff\n" +
            "üë®‚Äçüíª–¢–°: @ffff\n\n" +
            "üéâ –ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å 30.07.2023\n" +
            `ü§ë –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>$${sumProfits}</b>`,
        {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üèÜ–¢–æ–ø",
                            callback_data: JSON.stringify({
                                action: "show_top",
                            }),
                        },
                    ],
                ],
            },
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û –Ω–∞—Å"
bot.onText(/‚ÑπÔ∏è –û –Ω–∞—Å/, (msg) => {
    const chatId = msg.chat.id;
    if(chatId==process.env.chatId||chatId==process.env.channelId)return;
    bot.sendMessage(
        chatId,
        "üåù–¢–° –ø—Ä–æ–µ–∫—Ç–∞ - @rioPhantom\n\n" +
            "–ü—Ä–æ–≤–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –¥–æ–≤–æ–¥–∏–º –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —É –∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∂–µ–ª–∞–Ω–∏–µ. <b>–î–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è —Ç–æ–ø–∞–º</b>\n" +
            "<b>–õ—É—á—à–∏–π –ª–µ–Ω–¥–∏–Ω–≥, –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç, –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–≥—Ä–æ–º–Ω–∞—è —á–∞—Å—Ç—å –ø–ª—é—à–µ–∫</b>",
        {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üéÅ –†–æ–∑—ã–≥—Ä—ã—à",
                            callback_data: JSON.stringify({
                                action: "sendup",
                            }),
                        },
                        {
                            text: "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ",
                            callback_data: JSON.stringify({
                                action: "problem_call",
                            }),
                        },
                    ],
                ],
            },
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userUsername = callbackQuery.from.username;
    console.log("POS:337", callbackQuery.data);
    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "sendup") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { referralCode } = userProfile;
        
        const message = `üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:\n‚ï∞ üéÅ –ü—Ä–æ—Ñ–∏–ª—å -> –†–æ–∑—ã–≥—Ä—ã—à\n\n\n\n${sendupText}`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
        });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∑–∞—è–≤–∫–∏ –æ–± –æ—à–∏–±–∫–µ
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userUsername = callbackQuery.from.username;
    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "problem_call") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { referralCode } = userProfile;

        const message = `üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:\n‚ï∞ ‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å -> –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n\n\n\n <b>–ü–∏—à–∏—Ç–µ –≤ —á–∞—Ç</b>`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
        });
        bot.once("message", async (message) => {
            const problem = message.text;

            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            // –ù–∞–π–¥–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for (const owner of ownerChatId) {
                bot.sendMessage(
                    owner,
                    `‚ö†Ô∏è–°–æ–æ–±—â–∞—é—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ –±–æ—Ç–µ‚ö†Ô∏è:\n\n${problem}`
                );
            }
        });
        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "sendup_change" && isOwner(userId)) {
        const message = `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
        });
        bot.once("message", async (message) => {
            const newText = message.text;
            sendupText = newText;
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            // –ù–∞–π–¥–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for (const owner of ownerChatId) {
                bot.sendMessage(owner, newText, { parse_mode: "HTML" });
            }
        });
        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "workerpercent_change" && isOwner(userId)) {
        let workerId;
        const message = `–í–≤–µ–¥–∏—Ç–µ userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç. –ö –ø—Ä–∏–º–µ—Ä—É, 628419349 –∏–ª–∏ –∂–µ 3329492. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –≤–≤–µ–¥–∏ /cancel`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
        });
        
        bot.once("message", async (message) => {
            const idWork = message.text;
            workerId = idWork;
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if(idWork=="/cancel"){
                return;
            }
            // –ù–∞–π–¥–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            bot.sendMessage(
                chatId,
                "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –µ–º—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ö –ø—Ä–∏–º–µ—Ä—É, 50. –í–≤–æ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
                { parse_mode: "HTML" }
            );
            bot.once("message", async (message) => {
                const worker = await UserProfile.findOne({ userId: workerId });
                if(idWork=="/cancel")return;
                if (worker) {
                    worker.workerPercent = parseInt(message.text);
                    await worker.save();

                    bot.sendMessage(chatId, "–ò–∑–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞", {
                        parse_mode: "HTML",
                    });
                } else {
                    bot.sendMessage(chatId, "–¢–∞–∫–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", {
                        parse_mode: "HTML",
                    });
                }
                // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

                // –ù–∞–π–¥–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            });
        });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const messageText = msg.text.trim().toLowerCase();
    const userUsername = msg.from.username;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = await UserState.findOne({ userId });

    if (userState && userState.state === "applying") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

        // –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingApplication = await UserApplication.findOne({ userId });

        if (!existingApplication) {
            // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            const newApplication = new UserApplication({
                userId,
                hasExperience: messageText,
                workerUserName: userUsername,
            });
            await newApplication.save();

            bot.sendMessage(
                chatId,
                "<b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É?</b>",
                { parse_mode: "HTML" }
            );
        } else if (existingApplication.timeAvailable === undefined) {
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            existingApplication.timeAvailable = messageText;
            await existingApplication.save();

            bot.sendMessage(
                chatId,
                "<b>–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏? –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤–µ–Ω—å–∫–∏–π –º–µ—Ä–µ–Ω –ª–∏–±–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è?.</b>",
                { parse_mode: "HTML" }
            );
        } else if (existingApplication.expectations === undefined) {
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            existingApplication.expectations = msg.text;
            await existingApplication.save();

            bot.sendMessage(
                chatId,
                "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä—É–º, –≥–¥–µ –Ω–∞—Å –Ω–∞—à–ª–∏.</b>",
                { parse_mode: "HTML" }
            );
        } else if (existingApplication.forumLink === undefined) {
            // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É
            existingApplication.forumLink = msg.text;
            await existingApplication.save();

            bot.sendMessage(
                chatId,
                "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.</b>",
                { parse_mode: "HTML" }
            );

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
            for (const owner of ownerChatId) {
                bot.sendMessage(
                    owner,
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–µ.`
                );
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await UserState.deleteOne({ userId });
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /applications –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const { action } = JSON.parse(callbackQuery.data);
    //console.log(userId, ownerChatId);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (action != "applications") return;
    if (isOwner(userId)) {
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const allApplications = await UserApplication.find({
            status: "pending",
        }).limit(8);
        console.log(allApplications, "allApplications");
        if (allApplications.length === 0) {
            bot.sendMessage(chatId, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.");
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
            // console.log(allApplications[0]._id.toString());
            const keyboard = allApplications.map((application) => {
                console.log(
                    JSON.stringify({
                        action: "Apl",
                        applicationId: application._id.toString(),
                    }).length
                );
                return {
                    text: `–ó–∞—è–≤–∫–∞ @${application.workerUserName} ${application.userId}`,

                    callback_data: JSON.stringify({
                        action: "Apl",
                        applicationId: application._id.toString(),
                    }),
                };
            });

            bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:", {
                reply_markup: {
                    inline_keyboard: [keyboard],
                },
            });
        }
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

bot.onText(/\/top/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    console.log(userId, ownerChatId);

    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const allProfits = await Profit.find({ isPaid: true });
    console.log("allProfits", allProfits);
    let users = [];
    // {
    //     rid:"fff",
    //     sum:""
    // }

    allProfits.forEach((item) => {
        console.log("item", item);
        if (!users[item.rid]) {
            users[item.rid] = { rid: item.rid, sum: 0 };
            console.log("create users[rid]");
            console.log(users[item.rid]);
        }
        users[item.rid] = {
            rid: users[item.rid].rid,
            sum: users[item.rid].sum + item.amountUsd,
        };
    });
    console.log(users);
    const sorted = Object.keys(users)
        .sort((a, b) => users[b].sum - users[a].sum)
        .reduce((rslt, key) => rslt.set(key, users[key]), new Map());
    let message = "";
    let it = 0;
    for (const [key, obj] of sorted.entries()) {
        if (key != "undefined" && it < 10) {
            message = message + `${it+1}. #${key}: $${obj.sum}\n`;
            it++;
        }
    }
    console.log("users.sort", users);
    bot.sendMessage(chatId, message);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payoff –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const { action } = JSON.parse(callbackQuery.data);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (action != "payoff") return;
    if (isOwner(userId)) {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø—Ä–æ—Ñ–∏—Ç
        const profitsPayout = await Profit.find({
            payouted: false,
            isPaid: true,
        });
        console.log("profitsPayout.length", profitsPayout.length);
        //console.log(profitsPayout);
        if (profitsPayout.length === 0) {
            bot.sendMessage(
                chatId,
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É."
            );
        } else {
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏—Ç–µ, —Å—É–º–º–µ –ø—Ä–æ—Ñ–∏—Ç–∞, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const profit of profitsPayout) {
                console.log(profit);
                const userProfile = await UserProfile.findOne({
                    referralCode: profit.rid,
                });

                console.log(userProfile);
                if (userProfile) {
                    const message =
                        `üë§ –í–æ—Ä–∫–µ—Ä REF:#${userProfile.referralCode}:\n` +
                        `üë§ –í–æ—Ä–∫–µ—Ä USERNAME: @${userProfile.workerUserName}\n` +
                        `üí∏ –°—É–º–º–∞: 70% - $${
                            profit.amountUsd * userProfile.workerPercent/100
                        }\n` +
                        `üßä –ö–æ—à–µ–ª–µ–∫: ${userProfile.wallet.address} (${userProfile.wallet.type})\n`;

                    bot.sendMessage(chatId, message, {
                        parse_mode: "HTML",
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "–í—ã–ø–ª–∞—Ç–∏–ª",
                                        callback_data: JSON.stringify({
                                            action: "paid",
                                            profitId: profit._id,
                                        }),
                                    },
                                ],
                            ],
                        },
                    });
                } else {
                    const message =
                        "–ë–µ—Å—Ö–æ–∑–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!\n" +
                        `–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: ${profit.amountUsd}\n` +
                        `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${profit.name}\n` +
                        `–ö–æ—à–µ–ª—ë–∫:${profit.wallet}\n` +
                        `–°—É–º–º–∞ –≤ –∫—Ä–∏–ø—Ç–µ, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:${profit.sendCount}\n` +
                        `–°—É–º–º–∞ USD: ${profit.amountUsd}`;
                    bot.sendMessage(chatId, message, {
                        parse_mode: "HTML",
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "–í—ã–ø–ª–∞—Ç–∏–ª",
                                        callback_data: JSON.stringify({
                                            action: "paid",
                                            profitId: profit._id,
                                        }),
                                    },
                                ],
                            ],
                        },
                    });
                }
            }
        }
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const { action, applicationId } = callbackQuery.data;
    console.log(callbackQuery.data);
    console.log("applicationId:", applicationId);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (isOwner(userId)) {
        if (action === "accept" || action === "reject") {
            const application = await UserApplication.findById(applicationId);

            if (!application) {
                bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
            const message = `–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${
                application.userId
            }\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${
                application.hasExperience ? "–î–∞" : "–ù–µ—Ç"
            }\n–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç: ${
                application.timeAvailable
            }\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º: ${application.forumLink}\n`;


        }
    } else if (action === "accept" || action === "reject") {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "stats") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { profits, referralCode } = userProfile;

        const profit = await Profit.findOne({
            rid: userProfile.referralCode,
            isPaid: true,
        }).sort({ _id: -1 });
        console.log("userProfile.referralCode", userProfile.referralCode);
        let days;
        if (profit) {
            const date = profit.createdAt;
            let currentDate = Date.parse(new Date());
            days = (currentDate - Date.parse(date)) / 86400000; //86400000 - ms –≤ –¥–Ω–µ
            console.log(Math.round(days));
        }
        const message = `üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: ${profits.amount} –Ω–∞ —Å—É–º–º—É ${
            profits.amountUSD
        }$\n\n‚è∞ –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: ${
            profit
                ? `${Math.round(days)} ${createLabel(Math.round(days), [
                      "–î–µ–Ω—å",
                      "–î–Ω—è",
                      "–î–Ω–µ–π",
                  ])} –Ω–∞–∑–∞–¥ –Ω–∞ —Å—É–º–º—É $${profit.amountUsd}`
                : "–Ω–∏–∫–æ–≥–¥–∞"
        } \n\nüßæ –ß–µ–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞: ‚âà$${profits.amountUSD / profits.amount}`;
        bot.sendMessage(chatId, message, { parse_mode: "HTML" });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userUsername = callbackQuery.from.username;
    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "settings") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { referralCode } = userProfile;

        const message = `‚ñ´Ô∏è User ID: ${userId}\n`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: `${
                                userProfile.showProfile ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"
                            } –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø—Ä–æ—Ñ–∏—Ç–µ`,
                            callback_data: JSON.stringify({
                                action: "change_showProfile",
                            }),
                        },
                    ],
                ],
            },
        });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è work
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userUsername = callbackQuery.from.username;
    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "work_info") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { referralCode } = userProfile;

        const message =
            `üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:\n‚ï∞ ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å -> Work\n\n‚ï≠ ‚ñ´Ô∏è Username: <b>${userUsername}</b>\n‚îú ‚ñ´Ô∏è User ID: ${userId}\n‚ï∞ ‚ñ´Ô∏è Tag: #${referralCode}\n\n‚òÅÔ∏è –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}\nüë®‚Äçüíª` +
            `–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: `;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
            disable_web_page_preview: true,
        });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const userUsername = callbackQuery.from.username;
    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "change_showProfile") {
        const userProfile = await UserProfile.findOne({ userId: userId });
        const { referralCode } = userProfile;
        userProfile.showProfile = !userProfile.showProfile;
        await userProfile.save();

        const message = `üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:\n‚ï∞ ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚ï≠ ‚ñ´Ô∏è Username: <b>${userUsername}</b>\n‚îú ‚ñ´Ô∏è User ID: ${userId}\n‚ï∞ ‚ñ´Ô∏è Tag: #${referralCode}`;
        bot.sendMessage(chatId, message, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: `${
                                userProfile.showProfile ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"
                            } –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø—Ä–æ—Ñ–∏—Ç–µ`,
                            callback_data: JSON.stringify({
                                action: "change_showProfile",
                            }),
                        },
                    ],
                ],
            },
        });

        bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —Ç–æ–ø–∞ –≤ –ª—Å —é–∑–µ—Ä—É
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    const { action } = JSON.parse(callbackQuery.data); // –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞

    if (action === "show_top") {
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const allProfits = await Profit.find({ isPaid: true });
        console.log("allProfits", allProfits);
        let users = [];
        // {
        //     rid:"fff",
        //     sum:""
        // }

        allProfits.forEach((item) => {
            console.log("item", item);
            if (!users[item.rid]) {
                users[item.rid] = { rid: item.rid, sum: 0 };
                console.log("create users[rid]");
                console.log(users[item.rid]);
            }
            users[item.rid] = {
                rid: users[item.rid].rid,
                sum: users[item.rid].sum + item.amountUsd,
            };
        });
        console.log(users);
        const sorted = Object.keys(users)
            .sort((a, b) => users[b].sum - users[a].sum)
            .reduce((rslt, key) => rslt.set(key, users[key]), new Map());
        let message = "üìä –¢–û–ü 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n";
        let it = 0;
        for (const [key, obj] of sorted.entries()) {
            if (key != "undefined" && it < 10) {
                message =
                    message + `<b>${it}.</b> #${key}: <b> $${obj.sum}</b>\n`;
                it++;
            }
        }
        console.log("users.sort", users);
        bot.sendMessage(chatId, message, { parse_mode: "HTML" });

        //bot.deleteMessage(chatId, callbackQuery.message.message_id);
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const { action, applicationId } = JSON.parse(callbackQuery.data); // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º
    const userUsername = callbackQuery.from.username;
    //const applicationId = callbackQuery.data.split("_")[1];
    console.log(applicationId, action);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (isOwner(userId)) {
        if (action === "accept" || action === "reject") {
            const application = await UserApplication.findById(applicationId);
            console.log(application);
            if (!application) {
                bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–ø—Ä–∏–Ω—è—Ç–∞" –∏–ª–∏ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            application.status = action === "accept" ? "accepted" : "rejected";
            await application.save();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—å—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            const userChatId = application.userId;
            bot.sendMessage(
                userChatId,
                `${
                    action === "accept"
                        ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Phantom Team!\n\n–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ—Ä–∫—É —Å–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–∞–Ω—É–∞–ª–æ–º.\n–¢–∞–∫ –∂–µ –≤—Å—Ç—É–ø–∞–π –≤ –Ω–∞—à —á–∞—Ç http//s://t.me/+\n–£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞, —É–¥–∞—á–∏!\n(–ù–∞–ø–∏—à–∏ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞)`
                        : "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤–∞—à–µ –≤—Ä–µ–º—è, —É–≤—ã, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ –∑–∞—è–≤–∫—É "
                }.`
            );
            if (action === "accept") {
                const userProfile = new UserProfile({
                    userId: userChatId,
                    referralCode: generateUniqueReferralCode(12), // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    profitsCount: 0,
                    totalProfitAmount: 0,
                    workerUserName: application.workerUserName,
                });
                await userProfile.save();
            }
            else{action==="reject"}{
                application.delete();
            }
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            bot.deleteMessage(chatId, callbackQuery.message.message_id);
        }
    } else if (action === "accept" || action === "reject") {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    console.log("callbackQuery.data", callbackQuery.data);
    if (!JSON.parse(callbackQuery.data).hasOwnProperty("action")) return;

    const { action, profitId } = JSON.parse(callbackQuery.data);
    console.log("profitId", profitId);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (isOwner(userId)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏—Ç –≤—ã–ø–ª–∞—á–µ–Ω
        if (action == "paid") {
            const profit = await Profit.findById(profitId);
            console.log(profit);

            const userProfile = await UserProfile.findOne({
                referralCode: profit.rid,
            });
            if (userProfile) {
                console.log(profit);
                //userProfile.isProfitPaid = true;
                // await userProfile.save();
                profit.payouted = true;
                profit.save();
                //bot.sendMessage(chatId, '–¢—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.');
            } else {
                bot.sendMessage(
                    chatId,
                    "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É."
                );
                profit.payouted = true;
                profit.save();
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–æ–π "–í—ã–ø–ª–∞—Ç–∏–ª"
            bot.deleteMessage(chatId, callbackQuery.message.message_id);
        }
    } else if (action == "paid" && !isOwner(userId)) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    if (!JSON.parse(callbackQuery.data).hasOwnProperty("action")) return;
    const { action } = JSON.parse(callbackQuery.data);

    if (action === "profile") {
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n..."; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        bot.sendMessage(chatId, message);
    } else if (action === "wallets") {
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞
        bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞:", {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "USDT TRC-20",
                            callback_data: JSON.stringify({
                                action: "select_wallet",
                                walletType: "USDT TRC-20",
                            }),
                        },
                    ],
                ],
            },
        });
    } else if (action === "select_wallet") {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞
        const { walletType } = JSON.parse(callbackQuery.data);
        bot.sendMessage(
            chatId,
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (${walletType}):`
        );
        // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—à–µ–ª—å–∫–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot.once("message", async (message) => {
            const newWallet = message.text;

            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            // –ù–∞–π–¥–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const userProfile = await UserProfile.findOne({ userId: userId });

            if (userProfile) {
                // –û–±–Ω–æ–≤–∏–º –∫–æ—à–µ–ª–µ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userProfile.wallet = {
                    type: walletType,
                    address: newWallet,
                };
                await userProfile.save();

                bot.sendMessage(
                    chatId,
                    `–ö–æ—à–µ–ª–µ–∫ (${walletType}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ.`
                );
            } else {
                bot.sendMessage(
                    chatId,
                    "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É."
                );
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const { action, applicationId } = JSON.parse(callbackQuery.data);
    console.log(callbackQuery.data);
    console.log("applicationId:", applicationId);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
    if (isOwner(userId)) {
        if (action === "Apl") {
            const application = await UserApplication.findById(applicationId);

            if (!application) {
                bot.sendMessage(chatId, "–ó–∞—è–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
            const message = `–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${application.userId}\n`+`–ï–≥–æ –ª–æ–≥–∏–Ω:@${application.workerUserName} \n`+`–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${application.hasExperience}\n–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç: ${application.timeAvailable}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º: ${application.forumLink}\n–û–∂–∏–¥–∞–Ω–∏—è:${application.expectations}`;

            bot.sendMessage(chatId, message, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü—Ä–∏–Ω—è—Ç—å",
                                //callback_data: `accept_${applicationId}`,
                                callback_data: JSON.stringify({
                                    action: "accept",
                                    applicationId: applicationId,
                                }),
                            },
                            {
                                text: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                // callback_data: `reject_${applicationId}`,
                                callback_data: JSON.stringify({
                                    action: "reject",
                                    applicationId: applicationId,
                                }),
                            },
                        ],
                    ],
                },
            });
        }
    } else if (action === "userApp") {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
});

function convertTimeToMs(time){
    //console.log(typeof time);
   
    if(typeof time == "string" && time.indexOf('Z') <= -1){

   //     console.log(time);
        time=time+"Z";
    }
    //console.log(time);
    return Date.parse(time);
}

const filterOnlyReceiveCoin = (array, accountName,createdAt) => {

  
    return array
        .filter(
            (item) =>
                item.action_trace.act.name == "transfer" &&
                item.action_trace.receiver == accountName &&
                item.action_trace.act.data.quantity.includes("EOS")
                &&convertTimeToMs(item.block_time)-convertTimeToMs(createdAt)>0

        )
        .map((item) => {
            return { ...item, sendedNotify: false };
        });
};

function mergeArraysByField(arr1, arr2, field) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    let mergedArray = arr1.slice();

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –º–∞—Å—Å–∏–≤—É
    arr2.forEach((item2) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–ª—è –≤ –ø–µ—Ä–≤–æ–º –º–∞—Å—Å–∏–≤–µ
        const existingItem = mergedArray.find(
            (item1) => item1[field] === item2[field]
        );

        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
        if (!existingItem) {
            console.log("item not found!");
            mergedArray.push(item2);
        }
    });

    return mergedArray;
}

///////////////// INTERVAL TO GET HISTORY_TRANSACTIONS DATA

setInterval(
    asyncHandler(async () => {
        try {
            const accounts = await Account.find({});

            for (let i = 0; i < accounts.length; i++) {
                try {
                    console.log(accounts[i].accountName);
                    const response = await rpc.history_get_actions(
                        accounts[i].accountName,
                        -1,
                        -100
                    );
                        let diff=accounts[i].actions;
                    

                    console.log("diff.length before", diff.length);
                    const actions = filterOnlyReceiveCoin(
                        response.actions,
                        accounts[i].accountName,
                        accounts[i].createdAt
                    );
                    console.log("actions.length", actions.length);
                    if (!diff.length) {
                        diff = actions;
                    }
                    diff = mergeArraysByField(diff, actions, "block_num");
                    accounts[i].actions=diff;
                    await accounts[i].save();
                    console.log("diff.length after", diff.length);
                } catch (error) {
                    console.log(error);
                }
            }
        } catch (error) {
            console.log(error);
        }
    }),
    second * 10
);

setInterval(
    asyncHandler(async () => {
        const accounts = await Account.find({});

        for (let i = 0; i < accounts.length; i++) {
            const actions  = JSON.parse(JSON.stringify(accounts[i].actions));

            const itemFound = actions.find((item) => !item.sendedNotify);
            actions.find((item) => !item.sendedNotify).sendedNotify = true;
            accounts[i].actions = actions;
            
            if (itemFound) {
                let fields = [
                    "<b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!</b>",
                    `<b>–ê–¥—Ä–µ—Å—Å: </b>` + accounts[i].accountName,
                    "<b>–°—É–º–º–∞:</b>" + itemFound.action_trace.act.data.quantity,
                ];
                let msg = "";
                //–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                fields.forEach((field) => {
                    msg += field + "\n";
                });
                
                bot.sendMessage(process.env.CHAT_ID, msg, {
                    parse_mode: "HTML",
                    disable_web_page_preview: true,
                });
            }
            await accounts[i].save();
        }
    }),
    second*10
);

const PORT = process.env.PORT || 5000;

app.listen(PORT, console.log(`server run in port ${PORT}`));
